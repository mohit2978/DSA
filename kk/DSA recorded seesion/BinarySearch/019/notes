17--> aggresive cows
18-->allocate min no pages
19-->https://leetcode.com/problems/minimize-the-maximum-difference-of-pairs/description/

https://drive.google.com/file/d/1VGfqB4HNLhMk4JjNThdSm25df5iSPUfY/view

cpp
class Solution {
public:
    int minimizeMax(vector<int>& num, int p) {
        
        sort(num.begin(),num.end());
        
        int l=0, r=1e9, n=num.size();
        
        while(l<=r){
            
            int mid=l+(r-l)/2, cnt=0;
            
            for (int i=0;i+1<n;i++)
                if (num[i+1]-num[i]<=mid)
                    cnt++,i++;
            
            if (cnt>=p)
                r=mid-1;
            else
                l=mid+1;
            
        }
        
        return l;
    }
};

java
class Solution {
    public int minimizeMax(int[] nums, int p) {
        Arrays.sort(nums);
        int l = 0, r = (int) 1e9, n = nums.length;
        
        while (l <= r) {
            int mid = l + (r - l) / 2, cnt = 0;
            
            for (int i = 0; i + 1 < n; i++) {
                if (nums[i + 1] - nums[i] <= mid) {
                    cnt++;
                    i++;
                }
            }
            
            if (cnt >= p) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        
        return l;
    }
}

py
class Solution:
    def minimizeMax(self, nums: List[int], p: int) -> int:
        nums.sort()
        n = len(nums)
        left, right = 0, 10 ** 9

        while left <= right:
            mid = left + (right - left) // 2
            cnt = 0
            i = 0

            while i + 1 < n:
                if nums[i + 1] - nums[i] <= mid:
                    cnt += 1
                    i += 2
                else:
                    i += 1

            if cnt >= p:
                right = mid - 1
            else:
                left = mid + 1

        return left