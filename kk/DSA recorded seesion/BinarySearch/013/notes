https://drive.google.com/file/d/18r57_29NCt8Nu3k_GO_9zPf5P5GDtsRZ/view

https://leetcode.com/problems/search-a-2d-matrix/description/

cpp code
//C++
int Solution::searchMatrix(vector<vector<int> > &A, int B) {
    //first apply binary search on first column to get on which row you will have to apply binary search
    int s=0,e=A.size()-1;
    int idx=0;
    while(s<=e)
    {
        int m=s+(e-s)/2;
        if(A[m][0]==B)
        return 1;
        if(A[m][0]<B)
        {
            idx=m;
            s=m+1;
        }
        else
        e=m-1;
    }
    //after getting the appropriate column apply binary search on that row simply 
    return binary_search(A[idx].begin(),A[idx].end(),B);
}

//log(n)+log(n)=log(n) approach
//Java
public class Solution {
    Boolean found = false;
    public int searchMatrix(int[][] A, int B) {
        int row = A.length;
        int col = A[0].length;
        find(A,0,col-1,B);
        return found?1:0;
    }
    public void find(int[][] A, int row, int col, int B)
    {
        if(col<0 || row>A.length-1)
            return;
        if(A[row][col] == B)
        {
            found = true;
            return;
        }
        else if(A[row][col] > B)
            find(A, row, col-1, B);
        else
            find(A, row+1, col, B);
    }
}

//Python
class Solution:
    # @param A : list of list of integers
    # @param B : integer
    # @return an integer
    def searchMatrix(self, A, B):
        m=len(A)
        n=len(A[0])
        mi=A[0][0]
        ma=A[m-1][n-1]
        li=[]
        for row in A:
            li.extend(row)
        l=0
        r=len(li)-1
        while(l<=r):
            mid=l+(r-l)//2
            if(li[mid]==B):
                return 1
            elif(li[mid]<B):
                l=mid+1
            else:
                r=mid-1
        return 0