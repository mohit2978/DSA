Q1. Find the middle occurrence of X in the given array
A = [1,2,2,2,2,3,4,5,6,7] , X= 2
Output : 2


cpp
#include <bits/stdc++.h>
using namespace std;


// find middle occurence of x given that x will always be present in arr & more than one x is present.

int main() {


//  ip 
int n;  cin>>n;
vector<int> ip;

for(int i=0; i<n; i++) {
	int temp;  cin>>temp;
	
	ip.push_back(temp);
}

int x;  cin>>x;


// ******************************************************************//

sort(ip.begin(), ip.end());


// using concept of lower_bound & upper_bound. Now in order to save time will use stl function

int idx1 = lower_bound(ip.begin(), ip.end(), x) - ip.begin();

int idx2 = upper_bound(ip.begin(), ip.end(), x) - ip.begin();
idx2--;

int mid = (idx1+idx2)  /2;

cout<<mid<<" ";



	return 0;
}

java
import java.util.*;
import java.io.*;


class GFG {
    public static void findans(int []ans,int[]nums,int target)
    {
        int l=0;
        int r=nums.length-1;
        while(l <= r) 
        {
            int mid = (l+r)/2;
            if(nums[mid] == target) 
            {
                ans[0] = mid;
                r = mid-1;
            }
            else if(nums[mid] > target) 
            {
                 r = mid-1;   
            }
            else 
            {
                l = mid+1 ;
            }
        }
        l=0;
        r=nums.length-1;
        while(l <= r) 
        {
            int mid =(l+r)/2;
            if(nums[mid] == target) 
            {
                ans[1] = mid;
                l = mid+1;
            }
            else if(nums[mid] > target)
            {
                 r = mid-1 ;  
            }
            else 
            {
                l = mid+1 ;  
            }
        }
    }
	public static void main (String[] args) {
	    int nums[]={1,2,2,2,2,3,4,5,6,7};
	    Arrays.sort(nums);
	    int []ans=new int[2];
	    findans(ans,nums,2);
	    System.out.println(ans[0]);
	    System.out.println(ans[1]);
	    int retans=(ans[0]+ans[1])/2;
	    System.out.println(retans);
	}
}

py

def searchRange(nums, target):
    l = 0
    r = len(nums)-1
    ans = [-1,-1]
    while(l <= r) :
        mid = (l+r)//2
        if(nums[mid] == target) :
            ans[0] = mid
            r = mid-1
        elif(nums[mid] > target) :
            r = mid-1
        else :
            l = mid+1
    l = 0
    r = len(nums)-1
    while(l <= r) :
        mid = (l+r)//2
        if(nums[mid] == target) :
            ans[1] = mid
            l = mid+1
        elif(nums[mid] > target) :
            r = mid-1
        else :
            l = mid+1
            
    return ans

n =  int(input())
arr = list(map(int,input().split()))
arr.sort()
target = int(input())
ans = searchRange(arr,target)
print((ans[0]+ans[1])//2)