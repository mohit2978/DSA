
DSA(OA + CP + Interview) Live Training + 1-1 Guidance Program! 

Link - https://leetcode.com/problems/find-the-sum-of-subsequence-powers/description/ 

Find the sum of all subsets of length “k” in the given array 

Sum = definition is different = minimum absolute difference between any two elements in the subset of length “k” 

First observation is sorting the array because then it will be guaranteed; that sum = min-difference of adjacent elements. 


dp[i][k] = sum of all subsets of length “k” till index “i” of the array and it is fixed that ith element is the last element of k length subset 


dp[i][k][d] =  count of all subsets of length “k” till index “i” of the array and it is fixed that ith element is the last element of k length subset and their difference is “d” 

2 3 4 8 

dp[2][2][1] = 1 


Dp[i][k][d] -> iterate for all j from 0 to i 

if(b[i] - b[j] <d){
Do nothing 
}
Else if(b[i]-b[j]==d){
  dp[i][k][d] = dp[i][k][d] + dp[j][k-1][d] + dp[j][k-1][d+1] + ……. And so on!

}
Else{
    Dp[i][k][d] = dp[i][k][d] + dp[j][k-1][d]
}


This is still inefficient 

Still you can solve it by doing broken dp 

Even though the differences can be from 0 to 2*10^8 :- There can only be 2500 differences. 
















