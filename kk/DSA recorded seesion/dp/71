Link -> https://www.desiqna.in/15274/media-net-oa-sde1-fresher-july-2023-set-4 

video
https://drive.google.com/file/d/1pqBPL0YllnjwGsqc9_UkFdzd7pqvfb6O/view


Some basic pre 
requisites.

Decimal                Binary                 Bit_Count 
0                           000                           0
1                            001                           1
2                           010                           1
3                           011                           2
4                           100                           1
5                           101                            2

Xor :-> 
1^0 = 1 
0^1 = 1 
0^0 = 0
 
1^1 = 0 

Understanding of the problem:-> You are given “A[]” . You have to find all the valid subsequences from the Array A[] such that they are.

i)they are sorted. (strictly ascending)
ii) for any index “i”; 
bit_count(b1 xor b2 xor …….bi) <= bitcount(bi)  

-> When you get all the valid subsequences; check their Xor ; once you know their Xor ; task is to calculate how many different Xor can come.? 

-> dp[i] = should be somehow representing the subsequence which you can pick from index i = 1 to index i = N ; such that their xor is j ; and the last value is k 

-> but we are not able to represent the j and k ; so lets create state for them! 

-> dp[i][j][k] = true means there is a subsequence from index i to 1 to N = such that its xor is j and last element is k 

-> dp[i][j][k] = false ; means there is no subsequence such that from index to 1 to N ; its xor is j and last element is k 


dp[i][j][k] -> option 1 -> option to not include the last element as “i” ; dp[i-1][j][k]


dp[i][j][k] -> option58 -> make the last guy as item “i”

g^b[i] = j 

g = j^b[i]

-> dp[i-1][g][<k] 

-> dp[i-1][g][1]
OR
-> dp[i-1][g][2]

OR
.
.
.
.
-> dp[i-1][g][k-1]

How to optimize the dp state.? 

-> it means you reduce the state to make it efficient 

-> we need to keep track of xor and the last element 



-> dp[i][j] = means the subsequence such that from index 1 to i ; xor = j is existing and the last element of this subsequence id stored in dp[i][j] -> smartly storing the smallest possible last element for valid subsequence from i = 1 to N such that its xor is j.







Sol1 :-> 
C++ https://ideone.com/QkxHtU 
Java https://ideone.com/6beVO6 
Py https://ideone.com/IqsaJv 
TC : O(n*10000)
SC : O(n*10000)

Sol2 :-> 
C++ https://ideone.com/t0F4yr 
Java  https://ideone.com/2FFoXt 
Py https://ideone.com/S5vRSX 

TC : O(N*100)
SC : O(N*100)
