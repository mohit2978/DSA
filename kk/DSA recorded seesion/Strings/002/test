Link -> https://www.desiqna.in/15985/barclays-oa-string-algorithm-sep-2023.  


  032-->https://drive.google.com/file/d/1sOCWKBad9oB9jy7b09Iy0eyyGEQhu8_8/view  

Understanding :-> You are given two string S2 and S1 ; you have to create new string of length S2 + S1 - 1 ; if it not possible output -1 or else output the lexicographically minimum string 

In S2 whenever a “T” comes at index “i”; from that index there should be 1 occurrence of S1 

When there is no condition for an index; you write “A” to make the whole string lexicographically minimum. 


S = “bcb”
T = “TFTF”

=>”bcbcba”

Organic brute force:- For each index where “T” is coming just check if it is valid to replace all the part from index “i” with string s1; if yes keep doing else return -1 ; when there is a block with no constraint 

TC :- O(S1*S2)
SC :- O(S1+S2)

—---------------------------------------------------------------

Deep observation!:-> if S1 = “x1x2x3x4”; and S2 = “TFT” ; 
For the second “T” ; it just means “x1x2” should be equal to “x3x4”; it can be checked using the Z-algorithm! 








z Function.-> O(N). 

Z-algorithm:- z[i] = number of characters from index “i” same as start characters of the given string 

Code:- https://ideone.com/rJZHwM. 

Our_Z[i] = true ;  it means s[0……i] = s[n-i-1…….n-1](you can create this by manipulating the z array you get after doing the z algorithm.)


N = 8 
S[0….2] = S[5..7] 
“First “i” characters are matching the last i characters. 

Pseudo Code. -> https://ideone.com/rUc1rP 
TC O(N)
SC-> O(N).


C++ code. 
Java code.
Py code. 























